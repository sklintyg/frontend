// Generated by ts-to-zod
import { z } from 'zod'

export enum SickLeaveColumn {
  Personnummer = 'personnummer',
  Ålder = 'ålder',
  Namn = 'namn',
  Kön = 'kön',
  Diagnos = 'diagnos/er',
  Startdatum = 'startdatum',
  Slutdatum = 'slutdatum',
  Längd = 'längd',
  Intyg = 'intyg',
  Grad = 'grad',
  Läkare = 'läkare',
}

export enum Gender {
  M = 'M',
  F = 'F',
}

export enum PuResponse {
  FOUND = 'FOUND',
  NOT_FOUND = 'NOT_FOUND',
  MISSING = 'MISSING',
}

export const sickLeaveColumnSchema = z.nativeEnum(SickLeaveColumn)

export const sickLeaveDiagnosisSchema = z.object({
  beskrivning: z.string(),
  intygsVarde: z.string(),
  kapitel: z.string(),
  kod: z.string(),
  namn: z.string(),
})

export const userInfoSchema = z.object({
  namn: z.string(),
  hsaId: z.string(),
})

export const riskSignalSchema = z.object({
  berakningsTidpunkt: z.string(),
  intygsId: z.string(),
  riskDescription: z.string(),
  riskKategori: z.number(),
})

export const genderSchema = z.nativeEnum(Gender)

export const puResponseSchema = z.nativeEnum(PuResponse)

export const patientInfoSchema = z.object({
  alder: z.number(),
  id: z.string(),
  kon: genderSchema,
  namn: z.string(),
  responseFromPu: puResponseSchema,
  riskSignal: riskSignalSchema,
})

export const sickLeaveInfoSchema = z.object({
  aktivGrad: z.number(),
  biDiagnoser: z.array(sickLeaveDiagnosisSchema),
  dagar: z.number(),
  diagnos: sickLeaveDiagnosisSchema,
  grader: z.array(z.number()),
  intyg: z.number(),
  lakare: userInfoSchema,
  nyligenAvslutat: z.boolean(),
  obesvaradeKompl: z.number(),
  patient: patientInfoSchema,
  riskSignal: riskSignalSchema,
  slut: z.string(),
  slutOmDagar: z.string(),
  start: z.string(),
  unansweredOther: z.number(),
  vardEnhetId: z.string(),
  vardEnhetNamn: z.string(),
  vardGivareId: z.string(),
  vardGivareNamn: z.string(),
})

export type SickLeaveInfo = z.infer<typeof sickLeaveInfoSchema>
export type SickLeaveDiagnosis = z.infer<typeof sickLeaveDiagnosisSchema>
export type UserInfo = z.infer<typeof userInfoSchema>
export type PatientInfo = z.infer<typeof patientInfoSchema>
export type RiskSignal = z.infer<typeof riskSignalSchema>
