#!/bin/bash

echo $PIPELINE_CALLBACK_URL

# Move to workdir
cd /tmp/src

# Install dependencies
echo "############### Configure yarn ###############"
yarn cache dir

# Install dependencies
echo "############### Installing workspace ###############"
yarn install --frozen-lockfile
INIT_RESULT=$?
echo $INIT_RESULT
curl -X POST -k -d $INIT_RESULT $PIPELINE_CALLBACK_URL

# lint-check
echo "############### Linting ###############"
yarn lint

# Copy reports
echo "############### Posting Linting report ###############"
curl -X POST -k -d @lint-result.xml $PIPELINE_CALLBACK_URL

# Run tests
echo "############### Testing ###############"
CI=true yarn test:ci

# Copy reports
echo "############### Posting Testing Reports ###############"
curl -X POST -k -d @junit.xml $PIPELINE_CALLBACK_URL
curl -X POST -k -d @cobertura-coverage.xml $PIPELINE_CALLBACK_URL

# Make a production build
echo "############### Production Build ###############"
yarn build
BUILD_RESULT=$?
echo $BUILD_RESULT
curl -X POST -k -d $BUILD_RESULT $PIPELINE_CALLBACK_URL

# Copy the resulting artifacts
echo "############### Moving Build Artifacts ###############"
mv packages/webcert/dist/* /tmp/artifacts/build

# Copy the nginx configuration
echo "############### Moving Nginx Configuration ###############"
mv packages/webcert/nginx/* /tmp/artifacts/nginx

# make writeable
function make_writeable() {
    for d in $*; do
        [ -d "$d" ] && chmod -R a+rwx $d
    done
}

make_writeable $YARN_CACHE_FOLDER $CYPRESS_CACHE_FOLDER /tmp/src

if [ $BUILD_RESULT -ne 0 ]; then
    echo "Failed to build, exit code: $BUILD_RESULT"
    exit $BUILD_RESULT
fi

echo "Build complete"
