#!groovy

def s2iWebhook = registerWebhook()
def build = ""

// run shell command, return status code
def shell(cmd) {
    sh(
            script: cmd,
            returnStatus: true
    )
}

// run shell command and signal an error on failure
def eshell(cmd) {
    def rc = shell(cmd)
    if (rc != 0) {
        error("Error: shell command exited with error code ${rc}")
    }
}

def log(msg) {
    echo "${new Date().format('yyyy-MM-dd HH:mm:ss.SSS')} : ${msg}"
}

pipeline {
    agent any

    stages {

        stage('Checkout Source') {
            steps {
                script {
                    git url: "https://github.com/sklintyg/frontend.git"
                }
            }
        }

        stage('Initialize') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            def models = openshift.process("-f", "openshift/buildtemplate-frontend.yaml",
                                    "-p", "IS_APP_NAME=webcert-frontend",
                                    "-p", "APP_NAME=webcert-frontend",
                                    "-p", "STAGE=test",
                                    "-p", "BUILD_VERSION=latest",
                                    "-p", "ARTIFACT_IMAGE_SUFFIX=artifact",
                                    "-p", "PIPELINE_CALLBACK_URL='${s2iWebhook.getURL()}'")
                            openshift.apply(models)

                            build = openshift.selector("bc", "webcert-frontend-artifact").startBuild("--from-dir .")
                            sleep(time: 1, unit: 'SECONDS')
                            log "${build.name()} started"

                            timeout(5) {
                                log "Waiting (max 5 min) for POST of initialize result to ${s2iWebhook.getURL()}"
                                def initializeResult = waitForWebhook(s2iWebhook)
                                log "Initialize result = ${initializeResult}"
                            }
                        }
                    }
                }
            }
        }

        stage('Static Code Analysis') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            timeout(5) {
                                log "Waiting (max 5 min) for POST of lint-report to ${s2iWebhook.getURL()}"
                                def lintReport = waitForWebhook(s2iWebhook)

                                def lintReportPath = 'lint-result.xml'
                                writeFile file: lintReportPath, text: lintReport.replaceAll("/tmp/src", ".")

                                recordIssues enabledForFailure: true, aggregatingResults: true, tool: checkStyle(pattern: 'lint-result.xml')
                            }
                        }
                    }
                }
            }
        }

        stage('Unit Testing') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            timeout(10) {
                                log "Waiting (max 10 min) for POST of test-report to ${s2iWebhook.getURL()}"
                                def testReport = waitForWebhook(s2iWebhook)

                                def testReportPath = 'junit.xml'
                                writeFile file: testReportPath, text: testReport

                                junit checksName: 'Unit tests', testResults: testReportPath
                            }

                            timeout(1) {
                                log "Waiting (max 1 min) for POST of coverage-report to ${s2iWebhook.getURL()}"
                                def coverageReport = waitForWebhook(s2iWebhook)

                                if (coverageReport?.trim()) {
                                    def coverageReportPath = 'cobertura-coverage.xml'
                                    writeFile file: coverageReportPath, text: coverageReport.replaceAll("/tmp/src", ".")

                                    cobertura coberturaReportFile: coverageReportPath, enableNewApi: true, failUnhealthy: false, failUnstable: false, onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            timeout(5) {
                                log "Waiting (max 5 min) for POST of build result to ${s2iWebhook.getURL()}"
                                def buildResult = waitForWebhook(s2iWebhook)
                                log "Build result = ${buildResult}"
                            }
                        }
                    }
                }
            }
        }

        stage('Upload Artifact Image') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            timeout(20) {
                                def status = ""
                                build.untilEach(1) {
                                    status = it.object().status.phase
                                    log "Build status: ${status}"
                                    return !["Running", "Pending", "New"].contains(status)
                                }

                                log "Logs for artifact build"
                                build.logs()
                                if (status != "Complete") {
                                    error("Build terminated with status: ${status}")
                                }
                                log "Build Completed"
                            }
                        }
                    }
                }
            }
        }

        stage('Build Runtime Image') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            log "Build runtime image webcert-frontend"
                            build = openshift.selector("bc", "webcert-frontend").startBuild()
                            sleep(time: 1, unit: 'SECONDS')
                            log "${build.name()} started"
                            timeout(5) {
                                def status = ""
                                build.untilEach(1) {
                                    status = it.object().status.phase
                                    log "Build status: ${status}"
                                    return !["Running", "Pending", "New"].contains(status)
                                }
                                log "Logs for docker runtime build"
                                build.logs()
                                if (status != "Complete") {
                                    error("Build terminated with status: ${status}")
                                }
                                log "Build Completed"
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                log "Pipeline success :)"
                util.notifySuccess()
            }
        }

        failure {
            script {
                log "Pipeline Failed :("
                util.notifyFailed()
            }
        }

        cleanup {
            log "Clean up in post work space"
            cleanWs()
        }
    }
}
